package controller.export;

import java.io.FileWriter;
import java.util.Date;

import view.Panorpa;

import common.base.Logger;
import common.io.HtmlComposite;
import controller.DatabaseTools;


/**
 * A default HTML document, with divs for menu, main and footer.
 * 
 * <p>The document is made out of {@link HtmlComposite} components.
 * 
 * @author nicz
 *
 */
@Deprecated // Use PanorpaHtmlPage instead
public class HtmlPage extends HtmlComposite {

	private static final Logger log = new Logger(HtmlPage.class.getSimpleName(), true);
	
	protected final int depth;
	protected final String basePath;
	
	protected HtmlComposite head;
	protected HtmlComposite body;
	
	protected HtmlComposite main;
	protected HtmlComposite menu;
	protected HtmlComposite footer;
	protected HtmlComposite header;
	
	/**
	 * Constructor with document title 
	 * and default directory depth 0.
	 * 
	 * @param title the document title (in head, not an H1)
	 */
	public HtmlPage(String title) {
		this(title, 0);
	}
	
	/**
	 * Constructor with document title and directory depth.
	 * 
	 * @param title the document title (in head, not an H1)
	 * @param depth number of sub-directories from root path.
	 */
	public HtmlPage(String title, int depth) {
		
		this.depth = depth;
		String path = "";
		for (int i=0; i<depth; ++i) {
			path += "../";
		}
		this.basePath = path;
		
		head = this.addTag("head");
		body = this.addTag("body");
		
		header = body.addDiv("header");
		menu   = body.addDiv("menu");
		main   = body.addDiv("main");
		footer = body.addDiv("footer");
		
		head.addTag("title", title);
		head.addMeta("author", "Nicolas Zwahlen");
		head.addMeta("keywords", "Nature, Proxiphotographie");
		head.addText("    <meta charset=\"utf-8\">\n");
		head.addComment("Automatically generated by " + Panorpa.getInstance().getAppName() + " v" + 
				Panorpa.getInstance().getAppVersion() + " by nicZ on " + new Date());
		head.addText("\t<link href='favicon.ico' rel='icon' type='image/x-icon' />\n");
		addCss(basePath + "style.css");
		
		header.addText("\t<small>Photos de nature &mdash; par Nicolas Zwahlen</small>\n");
		
		buildMenu();
		buildFooter();
	}
	
	/**
	 * Saves this document to the given filename. 
	 * @param filename full file name (with path and extension)
	 */
	public void saveAs(String filename) {
		//log.debug("Saving document as " + filename);
		
		StringBuffer sb = new StringBuffer();
		write(sb);

		try {
			FileWriter fw = new FileWriter(filename);
			fw.write(sb.toString());
			fw.close();
		} catch (Exception exc) {
			log.error("Saving document failed: " + exc.getMessage());
		}
	}
	
	/**
	 * Dumps the document text to debugging log.
	 */
	public void dump() {
		log.debug("Dumping HTML document:");
		StringBuffer sb = new StringBuffer();
		write(sb);
		log.debug(sb.toString());
	}
	
	/**
	 * @return the document's HTML head.
	 */
	public HtmlComposite getHead() {
		return head;
	}

	/**
	 * @return the document's HTML body.
	 */
	public HtmlComposite getBody() {
		return body;
	}

	/**
	 * @return the document's main div.
	 */
	public HtmlComposite getMainDiv() {
		return main;
	}
	
	/**
	 * @return the document's menu div.
	 */
	public HtmlComposite getMenuDiv() {
		return menu;
	}
	
	/**
	 * Adds the specified CSS file to the head.
	 * 
	 * @param cssPath the relative path to the CSS file.
	 */
	public void addCss(String cssPath) {
		head.addCss(cssPath);
	}

	@Override
	public void write(StringBuffer sb) {
		output(sb, "<!DOCTYPE html>");
		output(sb, "<html lang=\"fr\">");
		writeChildren(sb);
		output(sb, "</html>");
	}
	
	/**
	 * Adds the shared part of the menu to the document.
	 */
	private void buildMenu() {
		String linkHome = "<a href=\"" + basePath + "index.html\" title=\"Page d'accueil\">Accueil</a>";
		menu.addTitle(1, linkHome);
		
		menu.addLink(basePath + "tree.html", "Classification", "Classification");
		menu.addBr();
		
		menu.addLink(basePath + "latest.html", "Dernières photos", "Dernières photos");
		menu.addBr();
		
		menu.addLink(basePath + "noms-latins.html", "Liste des espèces par noms latins", "Noms latins");
		menu.addBr();

		menu.addLink(basePath + "noms-verna.html", "Liste des espèces par noms vernaculaires", "Noms vernaculaires");
		menu.addBr();
		
		menu.addLink(basePath + "lieux.html", "Lieux", "Lieux");
		menu.addBr();
		
		menu.addLink(basePath + "journal.html", "Journal de terrain", "Excursions");
		menu.addBr();
		
		menu.addLink(basePath + "search.html", "Chercher dans les photos de nature", "Chercher");
		menu.addBr();
		
		menu.addLink(basePath + "liens.html", "Liens externes et bibliographie", "Liens");
		menu.addBr();
		
		menu.addLink("http://www.tf79.ch", "Accueil de tf79.ch", "TF79.ch");
		menu.addBr();
		
		// TODO charts
	}
	
	/**
	 * Adds a standard footer to the document.
	 */
	private void buildFooter() {
		footer.addPar("Copyleft Nicolas Zwahlen &mdash; " + 
				DatabaseTools.toPrettyDate(DatabaseTools.getDateNow()) +
				" &mdash; " + Panorpa.getInstance().getAppName() + " v" + Panorpa.getInstance().getAppVersion());
	}
	
	
//	public void testComposites() {
//		HtmlDoc html = new HtmlDoc("Composites test");
//		
//		HtmlComposite main = html.getMainDiv();
//		main.addTitle(1, "Composites test");
//		main.addPar("A test paragraph with a " +
//				getLink("docs/html/index.html", "link") +
//				" et des caractères accentués en français !");
//		
//		Vector<String> vecTest = new Vector<String>();
//		vecTest.add("blam");
//		vecTest.add("schlak");
//		main.addList(vecTest);
//		
//		main.addTitle(2, "Table tests");
//		HtmlComposite table = main.addTable();
//		for (int i=0; i<3; i++) {
//			Vector<String> vecData = new Vector<String>();
//			for (int j=0; j<3; j++) {
//				vecData.add("test" + i + "-" + j);
//			}
//			table.addTableData(vecData);
//		}
//		
//		main.addTitle(2, "Photos");
//		main.addImage("test.jpg", "Just a test");
//		
//		html.addCss("docs/html/style.css");
//		createMenu(html.getMenuDiv(), 1);
//		
//		html.dump();
//		html.saveAs("testComposite.html");
//	}

}
